Phase 1: Foundational Data Models (Database Schema)


Goal: Define all necessary Drizzle ORM schemas in your db/schema.ts file, establishing the core data structures for financial accounts, categories, transactions, and modules.

Step 1: Define Core Accounting and Financial Accounts Schema (chartOfAccountsTable, accountsTable)


- Rationale: These tables are foundational. chartOfAccountsTable defines the ledger structure, and accountsTable manages actual bank/cash accounts, both essential before recording any financial activity.

- Schema Fields:
	- chartOfAccountsTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- accountNumber (text, Not Null, Unique)

		- accountName (text, Not Null)

		- accountType (ENUM: 'asset', 'liability', 'equity', 'revenue', 'expense', 'cogs', 'other', Not Null)

		- description (text, Nullable)

		- parentId (UUID, Foreign Key to chartOfAccountsTable.id, Nullable, Self-referencing)

		- path (text, Nullable)

		- depth (integer, Default: 0)

		- isControlAccount (boolean, Not Null, Default: false)

		- isDefault (boolean, Not Null, Default: false)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- accountsTable (New): (This table consolidates Bank, Petty Cash, Momo, NBS)
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- name (text, Not Null)

		- accountType (ENUM: 'bank', 'mobile_money', 'cash_on_hand', 'other', Not Null)

		- accountNumber (text, Nullable)

		- bankName (text, Nullable)

		- bankAddress (jsonb, Nullable)

		- swiftCode (text, Nullable)

		- merchantCode (text, Nullable)

		- openingBalance (numeric, Not Null)

		- currentBalance (numeric, Not Null)

		- currency (text, Not Null)

		- chartOfAccountId (UUID, Foreign Key to chartOfAccountsTable.id, Not Null) - Link to an Asset account

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Add these Drizzle schemas to your db/schema.ts file.

Step 2: Define Expense and Income Categories Schema (expenseCategoriesTable, incomeCategoriesTable)


- Rationale: These allow for structured classification of all financial inflows and outflows, critical for detailed reporting. They link directly to the chartOfAccountsTable.

- Schema Fields:
	- expenseCategoriesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- name (text, Not Null)

		- description (text, Nullable)

		- parentId (UUID, Foreign Key to expenseCategoriesTable.id, Nullable, Self-referencing)

		- path (text, Nullable)

		- depth (integer, Default: 0)

		- chartOfAccountId (UUID, Foreign Key to chartOfAccountsTable.id, Not Null) - Link to an Expense account

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- incomeCategoriesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- name (text, Not Null)

		- description (text, Nullable)

		- parentId (UUID, Foreign Key to incomeCategoriesTable.id, Nullable, Self-referencing)

		- path (text, Nullable)

		- depth (integer, Default: 0)

		- chartOfAccountId (UUID, Foreign Key to chartOfAccountsTable.id, Not Null) - Link to a Revenue account

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Add these Drizzle schemas to db/schema.ts.

Step 3: Define Core Transaction Logging Schema (journalEntriesTable, journalEntryLinesTable)


- Rationale: These tables implement the double-entry accounting system, providing an immutable ledger for all financial events, which is critical for enterprise-grade finance.

- Schema Fields:
	- journalEntriesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- entryDate (timestamp, Not Null)

		- referenceType (text, Not Null) - e.g., 'expense', 'sale', 'purchase', 'payment_received', 'bill_payment', 'adjustment'

		- referenceId (UUID, Nullable) - FK to relevant source table (e.g., expensesTable.id, salesTable.id, billPaymentsTable.id, paymentsReceivedTable.id)

		- description (text, Nullable)

		- totalDebit (numeric, Not Null)

		- totalCredit (numeric, Not Null)

		- userId (UUID, Foreign Key to usersTable.id, Nullable)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- journalEntryLinesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- journalEntryId (UUID, Foreign Key to journalEntriesTable.id, Not Null)

		- chartOfAccountId (UUID, Foreign Key to chartOfAccountsTable.id, Not Null)

		- debit (numeric, Not Null, Default: 0)

		- credit (numeric, Not Null, Default: 0)

		- memo (text, Nullable)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Add these Drizzle schemas to db/schema.ts.

Step 4: Define Expenses Module Schemas (expensesTable, accompanyingExpenseTypesTable)


- Rationale: These capture all details related to operational and accompanying expenses.

- Schema Fields:
	- expensesTable (Existing, but needs enhancements):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- title (text, Not Null)

		- description (text, Nullable)

		- amount (numeric, Not Null)

		- expenseDate (timestamp, Not Null)

		- expenseCategoryId (UUID, Foreign Key to expenseCategoriesTable.id, Not Null)

		- payingAccountId (UUID, Foreign Key to accountsTable.id, Not Null)

		- referenceNumber (text, Not Null, Unique)

		- payee (text, Nullable)

		- comments (text, Nullable)

		- attachments (jsonb array of {id, url, name, size, type}, Default: [])

		- purchaseId (UUID, Foreign Key to purchasesTable.id, Nullable) - Link for accompanying expenses

		- isAccompanyingExpense (boolean, Not Null, Default: false)

		- accompanyingExpenseTypeId (UUID, Foreign Key to accompanyingExpenseTypesTable.id, Nullable)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- accompanyingExpenseTypesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- name (text, Not Null, Unique)

		- description (text, Nullable)

		- defaultExpenseCategoryId (UUID, Foreign Key to expenseCategoriesTable.id, Nullable)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Update/add these Drizzle schemas to db/schema.ts.

Step 5: Define Income Module Schemas (paymentsReceivedTable)


- Rationale: This table centralizes all records of incoming payments, whether from sales or other revenue streams.

- Schema Fields:
	- paymentsReceivedTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- paymentRefNumber (text, Not Null, Unique)

		- paymentDate (timestamp, Not Null)

		- customerId (UUID, Foreign Key to customersTable.id, Nullable)

		- saleId (UUID, Foreign Key to salesTable.id, Nullable)

		- incomeCategoryId (UUID, Foreign Key to incomeCategoriesTable.id, Nullable) - For other income

		- receivingAccountId (UUID, Foreign Key to accountsTable.id, Not Null)

		- amountReceived (numeric, Not Null)

		- paymentMethod (ENUM: 'cash', 'check', 'mobile_money', 'bank', Not Null)

		- notes (text, Nullable)

		- attachments (jsonb array of {id, url, name, size, type}, Default: [])

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Add these Drizzle schemas to db/schema.ts.

Step 6: Define Bill Manager Schemas (billPaymentsTable, billPaymentItemsTable, billPaymentAccountsTable, billPaymentAccompanyingExpensesTable)


- Rationale: These tables handle the complexities of vendor bill payments, including multi-account payments and payment-specific expenses.

- Schema Fields:
	- billPaymentsTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- billReferenceNo (text, Not Null, Unique)

		- paymentDate (timestamp, Not Null)

		- vendorId (UUID, Foreign Key to vendorsTable.id, Not Null)

		- totalPaymentAmount (numeric, Not Null)

		- generalComments (text, Nullable)

		- attachments (jsonb array of {id, url, name, size, type}, Default: [])

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- billPaymentItemsTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- billPaymentId (UUID, Foreign Key to billPaymentsTable.id, Not Null)

		- purchaseId (UUID, Foreign Key to purchasesTable.id, Not Null)

		- amountApplied (numeric, Not Null)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- billPaymentAccountsTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- billPaymentId (UUID, Foreign Key to billPaymentsTable.id, Not Null)

		- payingAccountId (UUID, Foreign Key to accountsTable.id, Not Null)

		- amountPaidFromAccount (numeric, Not Null)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())


	- billPaymentAccompanyingExpensesTable (New):
		- id (UUID, Primary Key, Default: gen_random_uuid())

		- billPaymentId (UUID, Foreign Key to billPaymentsTable.id, Not Null)

		- accompanyingExpenseTypeId (UUID, Foreign Key to accompanyingExpenseTypesTable.id, Not Null)

		- amount (numeric, Not Null)

		- payee (text, Nullable)

		- comments (text, Nullable)

		- isActive (boolean, Not Null, Default: true)

		- createdAt (timestamp, Not Null, Default: now())

		- updatedAt (timestamp, Not Null, Default: now())



- Action: Add these Drizzle schemas to db/schema.ts.

Step 7: Run Drizzle Migrations


- Rationale: Apply the new/updated schemas to your Supabase PostgreSQL database.

- Action:
	1. Generate a new migration file using your Drizzle CLI.

	2. Review the generated SQL to ensure it aligns with expectations.

	3. Apply the migration to your database.



---

Phase 2: Backend API and Server Actions (Next.js Server Components)


Goal: Create the necessary API endpoints and Server Actions to interact with the new database schemas.

Step 8: Implement CRUD Operations for Chart of Accounts and Account Management


- Rationale: Enable administrators to manage the foundational financial structure.

- Server Actions/API Endpoints:
	- POST /api/accounting/chart-of-accounts: Create a new CoA account.

	- GET /api/accounting/chart-of-accounts: Retrieve all CoA accounts (with optional filtering/pagination).

	- GET /api/accounting/chart-of-accounts/[id]: Retrieve a single CoA account.

	- PUT /api/accounting/chart-of-accounts/[id]: Update a CoA account.

	- DELETE /api/accounting/chart-of-accounts/[id]: Delete a CoA account (with checks for linked transactions).

	- Similar CRUD operations for accountsTable (Bank/Momo/Cash).


- Data Validation: Use Zod schemas for input validation for all create/update operations.

Step 9: Implement CRUD Operations for Expense and Income Categories


- Rationale: Allow flexible classification of financial activities.

- Server Actions/API Endpoints:
	- POST /api/settings/expense-categories: Create new expense category.

	- GET /api/settings/expense-categories: Retrieve all expense categories.

	- Similar CRUD operations for incomeCategoriesTable.

	- CRUD for accompanyingExpenseTypesTable.


- Data Validation: Use Zod schemas.

Step 10: Implement Expense Recording and Tracking Logic


- Rationale: Core functionality for the Expenses module. This involves both expensesTable and journal entries.

- Server Actions/API Endpoints:
	- POST /api/expenses/add:
		- Create an entry in expensesTable.

		- Crucially: Automatically create a journalEntriesTable record.

		- Automatically create journalEntryLinesTable records: Debit the appropriate expenseCategoriesTable's linked chartOfAccountsTable ID, and Credit the payingAccountId's linked chartOfAccountsTable ID.

		- Update accountsTable.currentBalance for the payingAccountId.


	- GET /api/expenses: Retrieve all expenses (with filtering by category, account, date, payee, purchase reference, accompanying expense type, etc.).

	- GET /api/expenses/[id]: Retrieve a single expense with its details.

	- PUT /api/expenses/[id]: Update an expense (requires careful handling of journal entry reversals/adjustments).

	- DELETE /api/expenses/[id]: Delete an expense (requires careful handling of journal entry reversals/adjustments).


- Data Validation: Use Zod schemas for expense input.

- Attachment Handling: Integrate with Supabase Storage for uploading and retrieving attachments.

Step 11: Implement Income Recording and Tracking Logic


- Rationale: Core functionality for the Income module. This involves paymentsReceivedTable and journal entries.

- Server Actions/API Endpoints:
	- POST /api/income/record-payment:
		- Create an entry in paymentsReceivedTable.

		- Crucially: Automatically create a journalEntriesTable record.

		- Automatically create journalEntryLinesTable records: Debit the receivingAccountId's linked chartOfAccountsTable ID, and Credit the appropriate incomeCategoriesTable's linked chartOfAccountsTable ID (or 'Accounts Receivable' if linked to salesTable).

		- Update accountsTable.currentBalance for the receivingAccountId.

		- If saleId is present, update salesTable.amountPaid and salesTable.paymentStatus.


	- GET /api/income: Retrieve all income (with filtering by category, account, date, customer, sales invoice, etc.).

	- GET /api/income/[id]: Retrieve a single income entry.

	- PUT /api/income/[id]: Update income (careful journal entry handling).

	- DELETE /api/income/[id]: Delete income (careful journal entry handling).


- Data Validation: Use Zod schemas for income input.

- Attachment Handling: Integrate with Supabase Storage.

Step 12: Implement Bill Manager Logic


- Rationale: Handle vendor bill payments, updating purchase statuses, and generating journal entries.

- Server Actions/API Endpoints:
	- POST /api/bills/pay:
		- Create an entry in billPaymentsTable.

		- Create entries in billPaymentItemsTable for each purchase being paid.

		- Create entries in billPaymentAccountsTable if multiple accounts are used.

		- Create entries in billPaymentAccompanyingExpensesTable for payment-specific expenses.

		- Crucially: Automatically create a journalEntriesTable record.

		- Automatically create journalEntryLinesTable records: Debit 'Accounts Payable' (or purchasesTable's vendor ledger) and Credit each payingAccountId's linked chartOfAccountsTable ID. Also Debit the relevant expense accounts for billPaymentAccompanyingExpensesTable.

		- Update accountsTable.currentBalance for all involved payingAccountIds.

		- Update purchasesTable.amountPaid and purchasesTable.paymentStatus for each purchase item.


	- GET /api/bills/tracker: Retrieve data for the bill tracker (aggregating from purchaseOrdersTable, purchasesTable, billPaymentsTable, vendorsTable).

	- GET /api/bills/payment/[id]: Retrieve a single bill payment.

	- PUT /api/bills/payment/[id]: Update bill payment (careful journal entry handling).

	- DELETE /api/bills/payment/[id]: Delete bill payment (careful journal entry handling).


- Data Validation: Use Zod schemas.

Step 13: Implement Audit Trail Logic (Interception)


- Rationale: All critical financial operations should log changes for compliance and debugging.

- Action: Create a middleware or a utility function that intercepts create, update, and delete operations on financial tables (e.g., accountsTable, expensesTable, paymentsReceivedTable, billPaymentsTable, and their related tables). Log the userId, actionType (create, update, delete), tableName, recordId, oldData (for updates/deletes), and newData (for creates/updates).


---

Phase 3: Frontend Development (Next.js Pages & Components)


Goal: Build the user interface using Next.js, Shadcn UI, React Hook Form, and Tanstack Query to interact with the backend.

Step 14: Configure Shadcn UI and Design System


- Rationale: Ensure consistent UI/UX across the application.

- Action: Finalize Shadcn UI setup, custom themes, fonts, and component structures.

Step 15: Develop UI for Chart of Accounts and Account Management


- Page: /accounting-and-finance/chart-of-account
	- Components:
		- ChartOfAccountsTable: Displays the hierarchical list of accounts.

		- AccountForm: For adding/editing CoA accounts using React Hook Form and Zod for validation.


	- Data Fetching: Use Tanstack Query for GET /api/accounting/chart-of-accounts.

	- Data Mutations: Use Tanstack Query mutations for POST, PUT, DELETE operations via Server Actions.


- Page: /accounting-and-finance/banking
	- Components:
		- AccountListTable: Displays accountsTable entries with current balances.

		- AccountForm: For adding/editing accountsTable entries.


	- Data Fetching/Mutations: Similar to CoA.


Step 16: Develop UI for Expense and Income Categories


- Page: /settings/expense-categories
	- Components: CategoryTable, CategoryForm.

	- Data Fetching/Mutations: Use Tanstack Query with GET, POST, PUT, DELETE for expense categories.


- Page: /settings/income-categories
	- Components: CategoryTable, CategoryForm.

	- Data Fetching/Mutations: Similar to expense categories.


- Page: /settings/accompanying-expense-types (if distinct UI is needed, otherwise integrated into expense form)
	- Components: AccompanyingExpenseTypeTable, AccompanyingExpenseTypeForm.


Step 17: Develop UI for Add Expense


- Page: /expenses/add-expense
	- Components:
		- AddExpenseForm: Comprehensive form using React Hook Form.
			- Fields for title, description, amount, date.

			- Dropdowns for expenseCategoryId (from Tanstack Query GET /api/settings/expense-categories).

			- Dropdown for payingAccountId (from Tanstack Query GET /api/accounting/accounts).

			- Dynamic display of currentBalance for selected payingAccountId.

			- Optional section for linking to purchaseId and accompanyingExpenseTypeId (from Tanstack Query GET /api/settings/accompanying-expense-types).

			- File upload component (integrate with Supabase Storage client-side upload then pass id/url to Server Action).


		- Zod for client-side form validation.


	- Data Mutation: Use Tanstack Query mutation for POST /api/expenses/add via Server Action.


Step 18: Develop UI for Expense Tracker (List and Details)


- Page: /accounting-and-finance/expenses-tracker or /expenses
	- Components:
		- ExpenseListTable: Displays expensesTable data.
			- Search bar, filter components (date range picker, category dropdown, account dropdown, payee input).

			- Pagination.

			- Action buttons (View Details, Edit, Delete).


		- ExpenseDetailsModal/ExpenseDetailsPage: Shows full details of a selected expense, including attachments.


	- Data Fetching: Use Tanstack Query for GET /api/expenses with dynamic filtering parameters.

	- Data Mutations: Tanstack Query mutations for PUT, DELETE operations via Server Actions.


Step 19: Develop UI for Add Income / Record Payment


- Page: /accounting-and-finance/record-income or /sales/record-payment
	- Components:
		- RecordIncomeForm: Uses React Hook Form.
			- Tabs/Radio for "Sales Payment" or "Other Income".

			- If Sales Payment: Dropdowns for customerId, then saleId (outstanding invoices for customer). Displays invoice details, amountDue.

			- If Other Income: Dropdown for incomeCategoryId, input for source.

			- Common fields: amountReceived, paymentDate, paymentMethod.

			- Dropdown for receivingAccountId with dynamic currentBalance display.

			- File upload component.


		- Zod for client-side validation.


	- Data Mutation: Use Tanstack Query mutation for POST /api/income/record-payment via Server Action.


Step 20: Develop UI for Income Tracker (List and Details)


- Page: /accounting-and-finance/income-tracker
	- Components:
		- IncomeListTable: Displays paymentsReceivedTable data.
			- Search bar, filter components (date range, category, customer, account, payment method, sale invoice number).

			- Pagination.

			- Action buttons (View Details, Edit, Delete).


		- IncomeDetailsModal/IncomeDetailsPage: Shows full details of selected income.


	- Data Fetching: Use Tanstack Query for GET /api/income with dynamic filtering.

	- Data Mutations: Tanstack Query mutations for PUT, DELETE operations.


Step 21: Develop UI for Bill Manager (Bill Payment & Bill Tracker)


- Page: /vendors/pay-bills (for Bill Payment)
	- Components:
		- BillPaymentForm: React Hook Form.
			- Date, Bill Reference No.

			- Dropdown for payingAccountId with currentBalance.

			- Dropdown for vendorId.

			- Dropdown for purchaseId (outstanding bills for vendor).

			- Section for "Add Purchased Expenses" (linked to accompanyingExpenseTypesTable).

			- Total calculation fields.

			- File upload component.

			- Logic for multi-account payment (e.g., add multiple payingAccountId rows).


		- Zod for validation.


	- Data Mutation: Use Tanstack Query mutation for POST /api/bills/pay.


- Page: /accounting-and-finance/bill-tracker
	- Components:
		- BillSummaryCards: Displays "Unbilled", "Unpaid", "Overdue", "Paid in last 30 days".

		- BillFilterPanel: Dropdowns for Vendor, Type, Status, Date.

		- BillListTable: Displays aggregated data from various tables (purchasesTable, billPaymentsTable).
			- Action column with Pay bills, Download payment, Edit payment, View Payment buttons/links.

			- Pagination.


		- BillDetailsModal/BillPaymentDetailsPage: For viewing/editing payments.


	- Data Fetching: Use Tanstack Query for GET /api/bills/tracker with filter parameters.



---

Phase 4: Integration, Testing & Refinement


Goal: Ensure all modules work together seamlessly, are thoroughly tested, and ready for production.

Step 22: Integrate with Existing Modules (Products, Sales, Purchases)


- Rationale: Ensure proper data flow and relationships between new and existing modules.

- Action:
	- Update purchasesTable and salesTable schemas to reflect amountPaid and paymentStatus fields, if not already present.

	- Ensure any existing logic for creating/updating purchases and sales also considers their financial impact and links to the new journalEntriesTable.

	- Verify that expensesTable.purchaseId correctly links to existing purchases.

	- Ensure paymentsReceivedTable.saleId correctly links to existing sales.

	- Review vendorsTable and customersTable for any required additions (e.g., default payment terms).


Step 23: Implement Robust Transactional Logic


- Rationale: Guarantee atomicity for financial operations.

- Action:
	- Utilize Drizzle ORM's transactional capabilities within your Server Actions. For example, when adding an expense, the creation of the expensesTable entry, the update of accountsTable.currentBalance, and the creation of journalEntriesTable/journalEntryLinesTable must all succeed or fail together.


Step 24: Role-Based Access Control (RBAC)


- Rationale: Secure financial data.

- Action: Integrate RBAC throughout your Server Actions to restrict access based on user roles (e.g., only "admin" or "accountant" roles can delete financial entries, only authorized roles can access certain financial reports).

Step 25: Comprehensive Testing


- Rationale: Identify and fix bugs, ensure data integrity and accurate calculations.

- Action:
	- Unit Tests: For Zod schemas, utility functions, and individual Server Actions.

	- Integration Tests: Test the full flow from UI interaction -> Server Action -> Database update -> UI re-render (e.g., adding an expense, then checking if the account balance updated and if it appears in the tracker).

	- End-to-End (E2E) Tests: Using tools like Playwright or Cypress to simulate user flows across multiple modules.

	- Financial Reconciliation Tests: Crucially, verify that the sum of all debits equals the sum of all credits in journalEntryLinesTable for any given period. Test various scenarios (partial payments, returns, adjustments).


Step 26: Implement Financial Reporting


- Rationale: Deliver actionable financial insights.

- Server Actions/API Endpoints:
	- GET /api/reports/profit-loss: Generate P&L statement (queries incomeCategoriesTable (revenue accounts) and expenseCategoriesTable (expense/COGS accounts) via journalEntryLinesTable).

	- GET /api/reports/balance-sheet: Generate Balance Sheet (queries asset, liability, and equity accounts from chartOfAccountsTable via journalEntryLinesTable balances).

	- GET /api/reports/cash-flow: Generate Cash Flow Statement (analyzes cash movements in/out of accountsTable via journalEntryLinesTable).

	- GET /api/reports/accounts-receivable-aging: Query salesTable and paymentsReceivedTable.

	- GET /api/reports/accounts-payable-aging: Query purchasesTable and billPaymentsTable.

	- GET /api/reports/general-ledger: Detailed transaction view for any CoA account.

	- GET /api/reports/trial-balance: Summary of all CoA accounts.


- UI Integration: Dedicated pages under /reporting-and-analysis for each report, with flexible date range selection and filter options. Use data visualization libraries for charts.

Step 27: Performance Optimization


- Rationale: Ensure the application remains fast and responsive as data grows.

- Action:
	- Review Drizzle ORM queries for efficiency.

	- Add database indexes as needed (already outlined in schema definition, but monitor and adjust).

	- Optimize Tanstack Query caching and data revalidation strategies.

	- Implement server-side pagination for large data tables.



---
This comprehensive plan covers the entire journey from foundational schema design to a fully integrated and testable financial system within your Next.js ERP application. Remember to prioritize security, data integrity, and a robust audit trail at every step.










📊 SAMPLE CHART OF ACCOUNTS
│
├── 💰 ASSETS (Type: ASSET, isControlAccount: true, isDefault: true)
│   │
│   ├── ► Current Assets (Type: ASSET, isControlAccount: true, isDefault: true)
│   │   ├── 1000 - Cash on Hand (Type: ASSET, isControlAccount: false, isDefault: true)
│   │   ├── 1010 - Bank Account - ECOBANK (Type: ASSET, isControlAccount: false, isDefault: false)
│   │   ├── 1020 - Bank Account - UBA (Type: ASSET, isControlAccount: false, isDefault: false)
│   │   ├── 1030 - Mobile Money - MTN (Type: ASSET, isControlAccount: false, isDefault: false)
│   │   ├── 1040 - Mobile Money - TELECEL (Type: ASSET, isControlAccount: false, isDefault: false)
│   │   ├── 1050 - Accounts Receivable (Type: ASSET, isControlAccount: true, isDefault: true)
│   │   ├── 1060 - Inventory Asset (Type: ASSET, isControlAccount: true, isDefault: true)
│   │
│   └── ► Fixed Assets (Type: ASSET, isControlAccount: true, isDefault: true)
│       ├── 1500 - Office Equipment (Type: ASSET, isControlAccount: false, isDefault: false)
│       ├── 1510 - Vehicles (Type: ASSET, isControlAccount: false, isDefault: false)
│
│
├── 📋 LIABILITIES (Type: LIABILITY, isControlAccount: true, isDefault: true)
│   │
│   ├── ► Current Liabilities (Type: LIABILITY, isControlAccount: true, isDefault: true)
│   │   ├── 2000 - Accounts Payable (Type: LIABILITY, isControlAccount: true, isDefault: true)
│   │   ├── 2020 - Sales Tax Payable (Type: LIABILITY, isControlAccount: true, isDefault: true)
│   │   ├── 2030 - Withholding Tax Payable (Type: LIABILITY, isControlAccount: true, isDefault: true)
│   │   ├── 2040 - Accrued Expenses (Type: LIABILITY, isControlAccount: false, isDefault: false)
│   │   └── 2050 - Short-term Loans Payable (Type: LIABILITY, isControlAccount: false, isDefault: false)
│   │
│   └── ► Long-Term Liabilities (Type: LIABILITY, isControlAccount: true, isDefault: true)
│       ├── 2500 - Business Loans Payable (Type: LIABILITY, isControlAccount: false, isDefault: false)
│       └── 2510 - Vehicle Loans (Type: LIABILITY, isControlAccount: false, isDefault: false)
│
│
├── 🏛️ EQUITY (Type: EQUITY, isControlAccount: true, isDefault: true)
│   ├── 3000 - Owner's Capital (Type: EQUITY, isControlAccount: true, isDefault: true)
│   ├── 3900 - Retained Earnings (Type: EQUITY, isControlAccount: true, isDefault: true)
│
│
├── 💵 INCOME (Type: REVENUE, isControlAccount: true, isDefault: true)
│   │
│   └── ► Direct Income (Type: REVENUE, isControlAccount: true, isDefault: true)
│       ├── 4000 - Sales Revenue (Type: REVENUE, isControlAccount: false, isDefault: true)
│       ├── 4010 - Service Revenue (Type: REVENUE, isControlAccount: false, isDefault: false)
│       ├── 4020 - Other Income (Type: REVENUE, isControlAccount: false, isDefault: false)
│       ├── 4030 - Interest Income (Type: REVENUE, isControlAccount: false, isDefault: false)
│       └── 4040 - Discounts Earned (Type: REVENUE, isControlAccount: false, isDefault: false)
│
│
├── 📦 COST OF GOODS SOLD (Type: EXPENSE, isControlAccount: true, isDefault: true)
│   │
│   └── ► Direct Costs (Type: EXPENSE, isControlAccount: true, isDefault: true)
│       ├── 5000 - Cost of Inventory Purchased (Type: EXPENSE, isControlAccount: true, isDefault: true)
│       ├── 5010 - Freight & Shipping Charges (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5020 - Custom Duty (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5030 - Clearing Charges (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5040 - Inland Transportation (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5050 - Declaration Charges (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5060 - Bank Transfer Charges - Vendor (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5070 - Warehousing & Storage Costs (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5080 - Insurance on Goods (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       └── 5090 - Import-Related Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
│
│
└── 💼 OPERATING EXPENSES (Type: EXPENSE, isControlAccount: true, isDefault: true)
    │
    ├── ► Rent & Facilities (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6000 - Office Rent (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6010 - Manager Rent (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Utilities (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6100 - Electricity (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6130 - Telephone & Internet (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6140 - Waste Disposal (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Office Supplies (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6200 - Stationery (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6210 - Printing Supplies (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6220 - Filing & Storage (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6230 - Breakroom Supplies (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Payroll Expenses (Type: EXPENSE, isControlAccount: true, isDefault: true)
    │   ├── 6300 - Salaries & Wages (Type: EXPENSE, isControlAccount: true, isDefault: true)
    │   ├── 6310 - Employee Benefits (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6320 - Payroll Taxes (Type: EXPENSE, isControlAccount: true, isDefault: true)
    │   └── 6330 - Bonuses & Incentives (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Marketing & Sales (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6400 - Advertising (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6410 - Promotional Materials (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6420 - Website Maintenance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6430 - Event Sponsorships (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6440 - Sales Commissions (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6450 - Travel & Entertainment (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6460 - Risk Allowance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Transportation (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6500 - General Transportation (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6510 - Vehicle Fuel (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6520 - Vehicle Repairs & Maintenance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6530 - Vehicle Regulatory Compliance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Professional Services (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6600 - Accounting Services (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6610 - Legal Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6620 - Consulting Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6630 - Training & Development (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Banking & Finance (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6700 - Bank Charges (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6710 - Loan Interest Expense (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6720 - Currency Exchange Losses (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Other Operating Expenses (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6800 - Insurance Expense (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6810 - Repairs & Maintenance (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6820 - Business Licenses & Permits (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   ├── 6830 - Regulatory Compliance (Type: EXPENSE, isControlAccount: true, isDefault: false)
    │   └── 6840 - Depreciation Expense (Type: EXPENSE, isControlAccount: true, isDefault: true)
    │
    └── ► Taxes & Other Expenses (Type: OTHER, isControlAccount: true, isDefault: false)
        ├── 7000 - Income Tax Expense (Type: OTHER, isControlAccount: false, isDefault: true)
        ├── 7010 - Sales Tax Expense (Type: OTHER, isControlAccount: false, isDefault: false)
        ├── 7020 - Withholding Tax Expense (Type: OTHER, isControlAccount: false, isDefault: false)
        └── 7030 - Penalties & Fines (Type: OTHER, isControlAccount: false, isDefault: false)






	   📊 CHART OF ACCOUNTS

├── 💰 ASSETS (Type: ASSET, isControlAccount: true, isDefault: true) // Top-level summary
│   │
│   ├── ► Current Assets (Type: ASSET, isControlAccount: true, isDefault: false) // Summary, but not typically a direct posting default itself
│   │   ├── 1000 - Cash on Hand (Type: ASSET, isControlAccount: false, isDefault: true) // Direct cash, often a default for cash transactions
│   │   ├── 1010 - Bank Account - ECOBANK (Type: ASSET, isControlAccount: false, isDefault: true) // Primary bank, can be default
│   │   ├── 1020 - Bank Account - UBA (Type: ASSET, isControlAccount: false, isDefault: false) // Secondary bank
│   │   ├── 1030 - Mobile Money - MTN (Type: ASSET, isControlAccount: false, isDefault: false) // Mobile money account
│   │   ├── 1040 - Mobile Money - TELECEL (Type: ASSET, isControlAccount: false, isDefault: false) // Secondary mobile money
│   │   ├── 1050 - Accounts Receivable (Type: ASSET, isControlAccount: true, isDefault: true) // CRITICAL: Summarizes customer ledger. Default for sales on credit.
│   │   ├── 1060 - Inventory Asset (Type: ASSET, isControlAccount: true, isDefault: true) // CRITICAL: Summarizes detailed inventory records. Default for inventory movements.
│   │   ├── 1070 - Prepaid Expenses (Type: ASSET, isControlAccount: false, isDefault: false) // Not a control, not a general default
│   │   └── 1080 - Deposits (Type: ASSET, isControlAccount: false, isDefault: false) // Not a control, not a general default
│   │
│   └── ► Fixed Assets (Type: ASSET, isControlAccount: true, isDefault: false) // Summary
│       ├── 1500 - Office Equipment (Type: ASSET, isControlAccount: false, isDefault: false) // Not a control or default
│       ├── 1510 - Vehicles (Type: ASSET, isControlAccount: false, isDefault: false) // Not a control or default
│       └── 1530 - Accumulated Depreciation (Type: ASSET, isControlAccount: true, isDefault: true) // CRITICAL: Contra-asset control account, often used by system defaults.
│
│
├── 📋 LIABILITIES (Type: LIABILITY, isControlAccount: true, isDefault: true) // Top-level summary
│   │
│   ├── ► Current Liabilities (Type: LIABILITY, isControlAccount: true, isDefault: false) // Summary
│   │   ├── 2000 - Accounts Payable (Type: LIABILITY, isControlAccount: true, isDefault: true) // CRITICAL: Summarizes vendor ledger. Default for purchases on credit.
│   │   ├── 2020 - Sales Tax Payable (Type: LIABILITY, isControlAccount: true, isDefault: true) // CRITICAL: Summarizes sales tax collected. Default for sales tax liability.
│   │   ├── 2030 - Withholding Tax Payable (Type: LIABILITY, isControlAccount: true, isDefault: true) // CRITICAL: Summarizes withholding tax. Default for WHT liability.
│   │   ├── 2040 - Accrued Expenses (Type: LIABILITY, isControlAccount: false, isDefault: false) // Not a control or default
│   │   └── 2050 - Short-term Loans Payable (Type: LIABILITY, isControlAccount: false, isDefault: false) // Not a control or default
│   │
│   └── ► Long-Term Liabilities (Type: LIABILITY, isControlAccount: true, isDefault: false) // Summary
│       ├── 2500 - Business Loans Payable (Type: LIABILITY, isControlAccount: false, isDefault: false) // Not a control or default
│       └── 2510 - Vehicle Loans (Type: LIABILITY, isControlAccount: false, isDefault: false) // Not a control or default
│
│
├── 🏛️ EQUITY (Type: EQUITY, isControlAccount: true, isDefault: true) // Top-level summary
│   ├── 3000 - Owner's Capital (Type: EQUITY, isControlAccount: false, isDefault: true) // Not a control (no subsidiary ledger), but a default for initial investment.
│   ├── 3900 - Retained Earnings (Type: EQUITY, isControlAccount: false, isDefault: true) // Not a control, but a critical default for net income transfer at year-end.
│   └── 3910 - Owner's Draw (Type: EQUITY, isControlAccount: false, isDefault: false) // Not a control or default.
│
│
├── 💵 INCOME (Type: REVENUE, isControlAccount: true, isDefault: true) // Top-level summary (adjusted Type to REVENUE)
│   │
│   └── ► Direct Income (Type: REVENUE, isControlAccount: true, isDefault: false) // Summary, but not direct default
│       ├── 4000 - Sales Revenue (Type: REVENUE, isControlAccount: false, isDefault: true) // CRITICAL: Primary revenue source. Default for product sales.
│       ├── 4010 - Service Revenue (Type: REVENUE, isControlAccount: false, isDefault: false) // Secondary revenue
│       ├── 4020 - Other Income (Type: REVENUE, isControlAccount: false, isDefault: false) // Miscellaneous income
│       ├── 4030 - Interest Income (Type: REVENUE, isControlAccount: false, isDefault: false) // Interest earned
│       └── 4040 - Discounts Earned (Type: REVENUE, isControlAccount: false, isDefault: false) // Discounts received from suppliers
│
│
├── 📦 COST OF GOODS SOLD (Type: EXPENSE, isControlAccount: true, isDefault: true) // Top-level summary (often a control, though specific COGS accounts aren't)
│   │
│   └── ► Direct Costs (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary, not a direct default itself
│       ├── 5000 - Cost of Inventory Purchased (Type: EXPENSE, isControlAccount: false, isDefault: true) // Primary COGS account for inventory sold.
│       ├── 5010 - Freight & Shipping Charges (Type: EXPENSE, isControlAccount: false, isDefault: false) // Direct expense, part of landed cost
│       ├── 5020 - Custom Duty (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5030 - Clearing Charges (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5040 - Inland Transportation (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5050 - Declaration Charges (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5060 - Bank Transfer Charges - Vendor (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5070 - Warehousing & Storage Costs (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       ├── 5080 - Insurance on Goods (Type: EXPENSE, isControlAccount: false, isDefault: false)
│       └── 5090 - Import-Related Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
│
│
└── 💼 OPERATING EXPENSES (Type: EXPENSE, isControlAccount: true, isDefault: true) // Top-level summary
    │
    ├── ► Rent & Facilities (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6000 - Office Rent (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6010 - Manager Rent (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Utilities (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6100 - Electricity (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6130 - Telephone & Internet (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6140 - Waste Disposal (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Office Supplies (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6200 - Stationery (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6210 - Printing Supplies (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6220 - Filing & Storage (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6230 - Breakroom Supplies (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Payroll Expenses (Type: EXPENSE, isControlAccount: true, isDefault: true) // Summary, often used for automated payroll postings.
    │   ├── 6300 - Salaries & Wages (Type: EXPENSE, isControlAccount: false, isDefault: true) // Primary payroll expense.
    │   ├── 6310 - Employee Benefits (Type: EXPENSE, isControlAccount: false, isDefault: false) // Not a control, not a default itself.
    │   ├── 6320 - Payroll Taxes (Type: EXPENSE, isControlAccount: false, isDefault: true) // Primary payroll tax expense.
    │   └── 6330 - Bonuses & Incentives (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Marketing & Sales (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6400 - Advertising (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6410 - Promotional Materials (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6420 - Website Maintenance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6430 - Event Sponsorships (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6440 - Sales Commissions (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6450 - Travel & Entertainment (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6460 - Risk Allowance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Transportation (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6500 - General Transportation (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6510 - Vehicle Fuel (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6520 - Vehicle Repairs & Maintenance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6530 - Vehicle Regulatory Compliance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Professional Services (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6600 - Accounting Services (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6610 - Legal Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6620 - Consulting Fees (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6630 - Training & Development (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Banking & Finance (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6700 - Bank Charges (Type: EXPENSE, isControlAccount: false, isDefault: false) // Not a control itself, but parent is
    │   ├── 6710 - Loan Interest Expense (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6720 - Currency Exchange Losses (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │
    ├── ► Other Operating Expenses (Type: EXPENSE, isControlAccount: true, isDefault: false) // Summary
    │   ├── 6800 - Insurance Expense (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6810 - Repairs & Maintenance (Type: EXPENSE, isControlAccount: false, isDefault: false) // Not a control itself, parent is.
    │   ├── 6820 - Business Licenses & Permits (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   ├── 6830 - Regulatory Compliance (Type: EXPENSE, isControlAccount: false, isDefault: false)
    │   └── 6840 - Depreciation Expense (Type: EXPENSE, isControlAccount: false, isDefault: true) // Primary depreciation expense
│
└── 📊 TAXES & OTHER EXPENSES (Type: OTHER, isControlAccount: true, isDefault: false) // Adjusted to a top-level category with specific Type
    ├── 7000 - Income Tax Expense (Type: OTHER, isControlAccount: false, isDefault: true) // Default for income tax
    ├── 7010 - Sales Tax Expense (Type: OTHER, isControlAccount: false, isDefault: false)
    ├── 7020 - Withholding Tax Expense (Type: OTHER, isControlAccount: false, isDefault: false)
    └── 7030 - Penalties & Fines (Type: OTHER, isControlAccount: false, isDefault: false)